// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  avatar    String? // Optional URL
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownedSessions         Session[] @relation("OwnedSessions")
  collaboratingSessions Session[] @relation("CollaboratingSessions")
  createdIdeas          Idea[]
}

model Session {
  id          String   @id @default(uuid())
  title       String
  description String?
  ownerId     String
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner         User       @relation("OwnedSessions", fields: [ownerId], references: [id], onDelete: Cascade)
  collaborators User[]     @relation("CollaboratingSessions") // Many-to-many
  categories    Category[]
  ideas         Idea[]
}

model Category {
  id        String   @id @default(uuid())
  name      String
  color     String // Hex color regex validated at application level
  sessionId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  ideas   Idea[]
}

model Idea {
  id         String   @id @default(uuid())
  content    String
  sessionId  String
  categoryId String? // Optional foreign key
  createdBy  String // User ID
  upvotes    Int      @default(0)
  positionX  Float? // Optional X coordinate
  positionY  Float? // Optional Y coordinate
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  session  Session   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull) // SetNull because category is optional
  creator  User      @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}
